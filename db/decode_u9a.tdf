--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_u9a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1561w[3..0]	: WIRE;
	w_anode1578w[3..0]	: WIRE;
	w_anode1588w[3..0]	: WIRE;
	w_anode1598w[3..0]	: WIRE;
	w_anode1608w[3..0]	: WIRE;
	w_anode1618w[3..0]	: WIRE;
	w_anode1628w[3..0]	: WIRE;
	w_anode1638w[3..0]	: WIRE;
	w_anode1648w[3..0]	: WIRE;
	w_anode1659w[3..0]	: WIRE;
	w_anode1669w[3..0]	: WIRE;
	w_anode1679w[3..0]	: WIRE;
	w_anode1689w[3..0]	: WIRE;
	w_anode1699w[3..0]	: WIRE;
	w_anode1709w[3..0]	: WIRE;
	w_anode1719w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1638w[3..3], w_anode1628w[3..3], w_anode1618w[3..3], w_anode1608w[3..3], w_anode1598w[3..3], w_anode1588w[3..3], w_anode1578w[3..3], w_anode1561w[3..3]);
	eq_wire2w[] = ( w_anode1719w[3..3], w_anode1709w[3..3], w_anode1699w[3..3], w_anode1689w[3..3], w_anode1679w[3..3], w_anode1669w[3..3], w_anode1659w[3..3], w_anode1648w[3..3]);
	w_anode1561w[] = ( (w_anode1561w[2..2] & (! data_wire[2..2])), (w_anode1561w[1..1] & (! data_wire[1..1])), (w_anode1561w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1578w[] = ( (w_anode1578w[2..2] & (! data_wire[2..2])), (w_anode1578w[1..1] & (! data_wire[1..1])), (w_anode1578w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1588w[] = ( (w_anode1588w[2..2] & (! data_wire[2..2])), (w_anode1588w[1..1] & data_wire[1..1]), (w_anode1588w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1598w[] = ( (w_anode1598w[2..2] & (! data_wire[2..2])), (w_anode1598w[1..1] & data_wire[1..1]), (w_anode1598w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1608w[] = ( (w_anode1608w[2..2] & data_wire[2..2]), (w_anode1608w[1..1] & (! data_wire[1..1])), (w_anode1608w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1618w[] = ( (w_anode1618w[2..2] & data_wire[2..2]), (w_anode1618w[1..1] & (! data_wire[1..1])), (w_anode1618w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1628w[] = ( (w_anode1628w[2..2] & data_wire[2..2]), (w_anode1628w[1..1] & data_wire[1..1]), (w_anode1628w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1638w[] = ( (w_anode1638w[2..2] & data_wire[2..2]), (w_anode1638w[1..1] & data_wire[1..1]), (w_anode1638w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1648w[] = ( (w_anode1648w[2..2] & (! data_wire[2..2])), (w_anode1648w[1..1] & (! data_wire[1..1])), (w_anode1648w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1659w[] = ( (w_anode1659w[2..2] & (! data_wire[2..2])), (w_anode1659w[1..1] & (! data_wire[1..1])), (w_anode1659w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1669w[] = ( (w_anode1669w[2..2] & (! data_wire[2..2])), (w_anode1669w[1..1] & data_wire[1..1]), (w_anode1669w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1679w[] = ( (w_anode1679w[2..2] & (! data_wire[2..2])), (w_anode1679w[1..1] & data_wire[1..1]), (w_anode1679w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1689w[] = ( (w_anode1689w[2..2] & data_wire[2..2]), (w_anode1689w[1..1] & (! data_wire[1..1])), (w_anode1689w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1699w[] = ( (w_anode1699w[2..2] & data_wire[2..2]), (w_anode1699w[1..1] & (! data_wire[1..1])), (w_anode1699w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1709w[] = ( (w_anode1709w[2..2] & data_wire[2..2]), (w_anode1709w[1..1] & data_wire[1..1]), (w_anode1709w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1719w[] = ( (w_anode1719w[2..2] & data_wire[2..2]), (w_anode1719w[1..1] & data_wire[1..1]), (w_anode1719w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
